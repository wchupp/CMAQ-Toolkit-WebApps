{"version":3,"sources":["utils.js","AgGrid.tsx","index.tsx"],"names":["deepMap","obj","fn","deepMapper","val","Array","isArray","map","Object","keys","reduce","res","key","mapObject","dateFormatter","isoString","formaterString","date","parseISO","format","_unused","columnFormaters","columnTypes","dateColumnFilter","filter","filterParams","comparator","filterValue","cellValue","compareAsc","numberColumnFilter","shortDateTimeFormat","valueFormatter","params","value","customDateTimeFormat","column","colDef","custom_format_string","customNumericFormat","_params$column$colDef","number","precision","n","Number","parseFloat","isNaN","toFixed","numberFormatter","customCurrencyFormat","currencySymbol","currencyFormatter","custom_currency_symbol","timedeltaFormat","duration","humanize","parseJsCodeFromPython","v","JS_PLACEHOLDER","match","RegExp","concat","exec","funcStr","Function","GridToolBar","props","_jsx","_Fragment","QuickSearch","enableQuickSearch","className","type","onChange","onKeyUp","showOverlay","placeholder","style","marginLeft","marginRight","ManualUpdateButton","manualUpdate","onClick","children","ManualDownloadButton","enabled","AgGrid","_React$Component","_inherits","_super","_createSuper","_this$props$args$grid","_this","_classCallCheck","call","api","columnApi","gridOptions","gridContainerRef","isGridAutoHeightOn","render","shouldRenderGridToolbar","args","enable_quicksearch","manual_update","excelExportMode","_jsxs","id","getThemeClass","ref","defineContainerHeight","e","returnGridValue","_this$api","exportDataAsExcel","throttle","showLoadingOverlay","trailing","debounce","setQuickFilter","target","hideOverlay","AgGridReact","onGridReady","React","createRef","ModuleRegistry","register","ClientSideRowModelModule","CsvExportModule","custom_css","css","styles","selector","prop","push","join","getCSS","styleSheet","document","createElement","innerText","head","appendChild","addCustomCSS","enable_enterprise_modules","registerModules","ExcelExportModule","GridChartsModule","SparklinesModule","ColumnsToolPanelModule","FiltersToolPanelModule","MasterDetailModule","MenuModule","RangeSelectionModule","RichSelectModule","RowGroupingModule","SetFilterModule","MultiFilterModule","SideBarModule","StatusBarModule","ClipboardModule","LicenseManager","setLicenseKey","domLayout","parseGridoptions","_createClass","assign","this","allow_unsafe_jscode","console","warn","_this2","updateEvents","update_on","doReturn","forEach","element","addEventListener","columnsState","columns_state","applyColumnState","state","applyOrder","excel_export_mode","ExcelExportMultipleSheetParams","data","Buffer","from","decode","toString","exportMultipleSheetsAsExcel","buffer","blob","getDataAsExcel","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","Promise","resolve","reject","arrayBuffer","then","encode","stop","getSheetDataForExcel","sheetName","Math","round","Date","now","_this$gridContainerRe","renderedGridHeight","current","clientHeight","Streamlit","setFrameHeight","columns_auto_size_mode","sizeColumnsToFit","autoSizeAllColumns","_getGridReturnValue","_callee2","returnData","returnMode","selected","returnValue","_context2","data_return_mode","t0","forEachLeafNode","row","abrupt","forEachNodeAfterFilter","group","forEachNodeAfterFilterAndSort","forEachDetailGridInfo","d","_d$api","forEachNode","isSelected","originalDtypes","frame_dtypes","rowData","selectedRows","getSelectedRows","selectedItems","getSelectedNodes","i","_objectSpread","_selectedRowNodeInfo","nodeRowIndex","rowIndex","nodeId","colState","getColumnState","ExcelBlob","handleExcelExport","apply","arguments","getGridReturnValue","setComponentValue","width","height","_this$props$theme","theme","base","prevProps","prevState","snapshot","previous_export_mode","current_export_mode","DownloadAsExcelIfRequested","reload_data","setRowData","JSON","parse","row_data","resizeGridContainer","event","_this3","fitColumns","log","attachStreamlitRerunToEvents","undefined","processPreselection","_this$gridOptions$pre","selectAll","length","idx","_this$api$getRowNode","getRowNode","setSelected","Component","withStreamlitConnection","domNode","getElementById","createRoot"],"mappings":"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","file":"static/js/main.96ffdac6.chunk.js","sourcesContent":["// stole from https://github.com/andfanilo/streamlit-echarts/blob/master/streamlit_echarts/frontend/src/utils.js Thanks andfanilo\nfunction mapObject(obj, fn) {\n    return Object.keys(obj).reduce((res, key) => {\n        res[key] = fn(obj[key])\n        return res\n    }, {})\n}\n\nfunction deepMap(obj, fn) {\n    const deepMapper = (val) =>\n        val !== null && typeof val === \"object\" ? deepMap(val, fn) : fn(val)\n    if (Array.isArray(obj)) {\n        return obj.map(deepMapper)\n    }\n    if (typeof obj === \"object\") {\n        return mapObject(obj, deepMapper)\n    }\n    return obj\n}\n\nexport default deepMap\n","import {\n  Streamlit,\n  ComponentProps,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\n\nimport React, { ReactNode } from \"react\"\nimport { AgGridReact } from \"@ag-grid-community/react\"\n\nimport {\n  ModuleRegistry,\n  ColumnApi,\n  GridApi,\n  DetailGridInfo\n} from \"@ag-grid-community/core\"\nimport { CsvExportModule } from \"@ag-grid-community/csv-export\"\nimport { ClientSideRowModelModule } from \"@ag-grid-community/client-side-row-model\"\nimport { LicenseManager } from \"@ag-grid-enterprise/core\"\n\nimport { GridChartsModule } from \"@ag-grid-enterprise/charts\"\nimport { SparklinesModule } from \"@ag-grid-enterprise/sparklines\"\nimport { ClipboardModule } from \"@ag-grid-enterprise/clipboard\"\nimport { ColumnsToolPanelModule } from \"@ag-grid-enterprise/column-tool-panel\"\nimport { ExcelExportModule } from \"@ag-grid-enterprise/excel-export\"\nimport { FiltersToolPanelModule } from \"@ag-grid-enterprise/filter-tool-panel\"\nimport { MasterDetailModule } from \"@ag-grid-enterprise/master-detail\"\nimport { MenuModule } from \"@ag-grid-enterprise/menu\"\nimport { RangeSelectionModule } from \"@ag-grid-enterprise/range-selection\"\nimport { RichSelectModule } from \"@ag-grid-enterprise/rich-select\"\nimport { RowGroupingModule } from \"@ag-grid-enterprise/row-grouping\"\nimport { SetFilterModule } from \"@ag-grid-enterprise/set-filter\"\nimport { MultiFilterModule } from \"@ag-grid-enterprise/multi-filter\"\nimport { SideBarModule } from \"@ag-grid-enterprise/side-bar\"\nimport { StatusBarModule } from \"@ag-grid-enterprise/status-bar\"\n\nimport { parseISO, compareAsc } from \"date-fns\"\nimport { format } from \"date-fns-tz\"\nimport deepMap from \"./utils\"\nimport { duration } from \"moment\"\n\nimport { debounce, throttle } from \"lodash\"\n\nimport { encode, decode } from \"base64-arraybuffer\"\nimport { Buffer} from 'buffer'\n\nimport \"./agGridStyle.scss\"\n\nimport \"@fontsource/source-sans-pro\"\n\ntype CSSDict = { [key: string]: { [key: string]: string } }\n\nfunction getCSS(styles: CSSDict): string {\n  var css = []\n  for (let selector in styles) {\n    let style = selector + \" {\"\n\n    for (let prop in styles[selector]) {\n      style += prop + \": \" + styles[selector][prop] + \";\"\n    }\n\n    style += \"}\"\n\n    css.push(style)\n  }\n\n  return css.join(\"\\n\")\n}\n\nfunction addCustomCSS(custom_css: CSSDict): void {\n  var css = getCSS(custom_css)\n  var styleSheet = document.createElement(\"style\")\n  styleSheet.type = \"text/css\"\n  styleSheet.innerText = css\n  document.head.appendChild(styleSheet)\n}\n\nfunction dateFormatter(isoString: string, formaterString: string): String {\n  try {\n    let date = parseISO(isoString)\n    return format(date, formaterString)\n  } catch {\n    return isoString\n  } finally {\n  }\n}\n\nfunction currencyFormatter(number: any, currencySymbol: string): String {\n  let n = Number.parseFloat(number)\n  if (!Number.isNaN(n)) {\n    return currencySymbol + n.toFixed(2)\n  } else {\n    return number\n  }\n}\n\nfunction numberFormatter(number: any, precision: number): String {\n  let n = Number.parseFloat(number)\n  if (!Number.isNaN(n)) {\n    return n.toFixed(precision)\n  } else {\n    return number\n  }\n}\n\nconst columnFormaters = {\n  columnTypes: {\n    dateColumnFilter: {\n      filter: \"agDateColumnFilter\",\n      filterParams: {\n        comparator: (filterValue: any, cellValue: string) =>\n          compareAsc(parseISO(cellValue), filterValue),\n      },\n    },\n    numberColumnFilter: {\n      filter: \"agNumberColumnFilter\",\n    },\n    shortDateTimeFormat: {\n      valueFormatter: (params: any) =>\n        dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\n    },\n    customDateTimeFormat: {\n      valueFormatter: (params: any) =>\n        dateFormatter(params.value, params.column.colDef.custom_format_string),\n    },\n    customNumericFormat: {\n      valueFormatter: (params: any) =>\n        numberFormatter(params.value, params.column.colDef.precision ?? 2),\n    },\n    customCurrencyFormat: {\n      valueFormatter: (params: any) =>\n        currencyFormatter(\n          params.value,\n          params.column.colDef.custom_currency_symbol\n        ),\n    },\n    timedeltaFormat: {\n      valueFormatter: (params: any) => duration(params.value).humanize(true),\n    },\n  },\n}\n\nfunction parseJsCodeFromPython(v: string) {\n  const JS_PLACEHOLDER = \"--x_x--0_0--\"\n  let funcReg = new RegExp(\n    `${JS_PLACEHOLDER}\\\\s*((function|class)\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\n  )\n\n  let match = funcReg.exec(v)\n\n  if (match) {\n    const funcStr = match[1]\n    // eslint-disable-next-line\n    return new Function(\"return \" + funcStr)()\n  } else {\n    return v\n  }\n}\n\nfunction GridToolBar(props: any) {\n  if (false) {\n    return (\n      <div id=\"gridToolBar\" style={{ paddingBottom: 30 }}>\n        <div className=\"ag-row-odd ag-row-no-focus ag-row ag-row-level-0 ag-row-position-absolute\">\n          <div className=\"\">\n            <div className=\"ag-cell-wrapper\">{props.children}</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n  return <></>\n}\n\nfunction QuickSearch(props: any) {\n  if (props.enableQuickSearch) {\n    return (\n      <input\n        className=\"ag-cell-value\"\n        type=\"text\"\n        onChange={props.onChange}\n        onKeyUp={props.showOverlay}\n        placeholder=\"quickfilter...\"\n        style={{ marginLeft: 5, marginRight: 5 }}\n      />\n    )\n  }\n  return <></>\n}\n\nfunction ManualUpdateButton(props: any) {\n  if (props.manualUpdate) {\n    return (\n      <button onClick={props.onClick} style={{ marginLeft: 5, marginRight: 5 }}>\n        Update\n      </button>\n    )\n  }\n  return <></>\n}\n\nfunction ManualDownloadButton(props: any) {\n  if (props.enabled) {\n    return (\n      <button onClick={props.onClick} style={{ marginLeft: 5, marginRight: 5 }}>\n        Download\n      </button>\n    )\n  }\n  return <></>\n}\nclass AgGrid<S = {}> extends React.Component<ComponentProps, S> {\n  private api!: GridApi\n  private columnApi!: ColumnApi\n  private columnFormaters: any\n  private gridOptions: any\n  private gridContainerRef: React.RefObject<HTMLDivElement>\n  private isGridAutoHeightOn: boolean\n\n  constructor(props: any) {\n    super(props)\n    //console.log(\"Grid INIT called\", props)\n\n    this.gridContainerRef = React.createRef()\n\n    ModuleRegistry.register(ClientSideRowModelModule)\n    ModuleRegistry.register(CsvExportModule)\n\n    if (props.args.custom_css) {\n      addCustomCSS(props.args.custom_css)\n    }\n\n    if (props.args.enable_enterprise_modules) {\n      ModuleRegistry.registerModules([\n        ExcelExportModule,\n        GridChartsModule,\n        SparklinesModule,\n        ColumnsToolPanelModule,\n        FiltersToolPanelModule,\n        MasterDetailModule,\n        MenuModule,\n        RangeSelectionModule,\n        RichSelectModule,\n        RowGroupingModule,\n        SetFilterModule,\n        MultiFilterModule,\n        SideBarModule,\n        StatusBarModule,\n        ClipboardModule,\n      ])\n\n      if (\"license_key\" in props.args) {\n        LicenseManager.setLicenseKey(props.args[\"license_key\"])\n      }\n    }\n\n    this.isGridAutoHeightOn =\n      this.props.args.gridOptions?.domLayout === \"autoHeight\"\n\n    this.parseGridoptions()\n  }\n\n  private parseGridoptions() {\n    let gridOptions = Object.assign(\n      {},\n      columnFormaters,\n      this.props.args.gridOptions\n    )\n\n    if (this.props.args.allow_unsafe_jscode) {\n      console.warn(\"flag allow_unsafe_jscode is on.\")\n      gridOptions = deepMap(gridOptions, parseJsCodeFromPython)\n    }\n    this.gridOptions = gridOptions\n  }\n\n  private attachStreamlitRerunToEvents(api: GridApi) {\n    const updateEvents = this.props.args.update_on\n    const doReturn = (e: any) => this.returnGridValue()\n\n    updateEvents.forEach((element: any) => {\n      if (Array.isArray(element)) {\n        api.addEventListener(element[0], debounce(doReturn, element[1]))\n      } else {\n        api.addEventListener(element, doReturn)\n      }\n    })\n  }\n\n  private loadColumnsState() {\n    const columnsState = this.props.args.columns_state\n\n    if (columnsState != null) {\n      this.columnApi.applyColumnState({ state: columnsState, applyOrder: true })\n    }\n  }\n\n  private DownloadAsExcelIfRequested() {\n    if (this.api) {\n\n      if (\n        this.props.args.excel_export_mode === \"MULTIPLE_SHEETS\" &&\n        this.props.args.ExcelExportMultipleSheetParams\n      ) {\n        let params = this.props.args.ExcelExportMultipleSheetParams\n\n        let data = params.data.map((v: string) =>\n          Buffer.from(decode(v)).toString(\"latin1\")\n        )\n        params.data = data\n        \n        this.api.exportMultipleSheetsAsExcel(params)\n      }\n      if (this.props.args.excel_export_mode === \"TRIGGER_DOWNLOAD\") {\n        this.api.exportDataAsExcel()\n      }\n    }\n  }\n\n  private handleExcelExport() {\n    if (this.props.args.excel_export_mode === \"FILE_BLOB_IN_GRID_RESPONSE\") {\n      let blob = this.api.getDataAsExcel() as Blob\n      let buffer;\n      (async () => {\n        await new Promise((resolve, reject) => {\n          blob.arrayBuffer().then((v) => {\n            buffer = encode(v)\n            resolve(buffer)\n          })\n        })\n      })()\n      return buffer\n    }\n\n    if (this.props.args.excel_export_mode === \"SHEET_BLOB_IN_GRID_RESPONSE\") {\n      let blob = this.api.getSheetDataForExcel({\n        sheetName: Math.round(Date.now() / 1000).toString(),\n      })\n      if (blob) return encode(Buffer.from(blob, 'latin1')) ///Buffer.from(blob).toString('base64')\n    }\n\n    return null\n  }\n\n  private resizeGridContainer() {\n    const renderedGridHeight = this.gridContainerRef.current?.clientHeight\n    Streamlit.setFrameHeight(renderedGridHeight)\n  }\n\n  private fitColumns() {\n    const columns_auto_size_mode = this.props.args.columns_auto_size_mode\n\n    switch (columns_auto_size_mode) {\n      case 1:\n      case \"FIT_ALL_COLUMNS_TO_VIEW\":\n        this.api.sizeColumnsToFit()\n        break\n\n      case 2:\n      case \"FIT_CONTENTS\":\n        this.columnApi.autoSizeAllColumns()\n        break\n\n      default:\n        break\n    }\n  }\n\n  private async getGridReturnValue() {\n    let returnData: any[] = []\n    let returnMode = this.props.args.data_return_mode\n\n    switch (returnMode) {\n      case 0: //ALL_DATA\n        this.api.forEachLeafNode((row) => returnData.push(row.data))\n        break\n\n      case 1: //FILTERED_DATA\n        this.api.forEachNodeAfterFilter((row) => {\n          if (!row.group) {\n            returnData.push(row.data)\n          }\n        })\n        break\n\n      case 2: //FILTERED_SORTED_DATA\n        this.api.forEachNodeAfterFilterAndSort((row) => {\n          if (!row.group) {\n            returnData.push(row.data)\n          }\n        })\n        break\n    }\n\n    let selected: any = {}\n    this.api.forEachDetailGridInfo((d: DetailGridInfo) => {\n      selected[d.id] = []\n      d.api?.forEachNode((n) => {\n        if (n.isSelected()) {\n          selected[d.id].push(n)\n        }\n      })\n    })\n\n    let returnValue = {\n      originalDtypes: this.props.args.frame_dtypes,\n      rowData: returnData,\n      selectedRows: this.api.getSelectedRows(),\n      selectedItems: this.api.getSelectedNodes().map((n, i) => ({\n        _selectedRowNodeInfo: { nodeRowIndex: n.rowIndex, nodeId: n.id },\n        ...n.data,\n      })),\n      colState: this.columnApi.getColumnState(),\n      ExcelBlob: this.handleExcelExport(),\n    }\n    //console.dir(returnValue)\n    return returnValue\n  }\n\n  private returnGridValue() {\n    this.getGridReturnValue().then((v) => Streamlit.setComponentValue(v))\n  }\n\n  private defineContainerHeight() {\n    if (this.isGridAutoHeightOn) {\n      return {\n        width: this.props.width,\n      }\n    } else {\n      return {\n        width: this.props.width,\n        height: this.props.args.height,\n      }\n    }\n  }\n\n  private getThemeClass() {\n    const themeName = this.props.args.theme\n    const themeBase = this.props.theme?.base\n\n    var themeClass = \"ag-theme-\" + 'alpine'\n\n    /* if (themeBase === \"dark\" && themeName !== \"material\") {\n      themeClass = themeClass + \"-dark\"\n    } */\n    return themeClass\n  }\n\n  public componentDidUpdate(prevProps: any, prevState: S, snapshot?: any) {\n\n    const previous_export_mode = prevProps.args.excel_export_mode\n    const current_export_mode = this.props.args.excel_export_mode\n\n    if (\n      ((previous_export_mode !== \"TRIGGER_DOWNLOAD\") && (current_export_mode === \"TRIGGER_DOWNLOAD\")) ||\n      ((previous_export_mode !== \"MULTIPLE_SHEETS\") && (current_export_mode === \"MULTIPLE_SHEETS\"))\n    ) {\n      this.DownloadAsExcelIfRequested()\n    }\n\n    if ((this.props.args.reload_data) && (this.api)){\n        this.api.setRowData(JSON.parse(this.props.args.row_data))\n    }\n\n\n    this.resizeGridContainer()\n  }\n\n  private onGridReady(event: any) {\n    this.api = event.api\n    this.columnApi = event.columnApi\n\n    this.api.addEventListener(\n      \"rowGroupOpened\",\n      (e: any) => this.resizeGridContainer()\n    )\n\n    this.api.addEventListener(\"firstDataRendered\", (e: any) => {\n      this.resizeGridContainer();\n      this.fitColumns()\n      console.log('here')\n    })\n\n    this.attachStreamlitRerunToEvents(this.api)\n    this.api.forEachDetailGridInfo((i: DetailGridInfo) => {\n      if (i.api !== undefined) {\n        this.attachStreamlitRerunToEvents(i.api)\n      }\n    })\n\n    this.api.setRowData(JSON.parse(this.props.args.row_data))\n\n    this.processPreselection()\n  }\n\n  private processPreselection() {\n    var preSelectAllRows =\n      this.props.args.gridOptions[\"preSelectAllRows\"] || false\n    if (preSelectAllRows) {\n      this.api.selectAll()\n      this.returnGridValue()\n    } else {\n      if (\n        this.gridOptions[\"preSelectedRows\"] ||\n        this.gridOptions[\"preSelectedRows\"]?.length() > 0\n      ) {\n        for (var idx in this.gridOptions[\"preSelectedRows\"]) {\n          this.api.getRowNode(idx)?.setSelected(true, false, true)\n          this.returnGridValue()\n        }\n      }\n    }\n  }\n\n  public render = (): ReactNode => {\n    let shouldRenderGridToolbar =\n      this.props.args.enable_quicksearch === true ||\n      this.props.args.manual_update ||\n      this.props.args.excelExportMode === \"MANUAL\"\n\n    return (\n      <div\n        id=\"gridContainer\"\n        className={this.getThemeClass()}\n        ref={this.gridContainerRef}\n        style={this.defineContainerHeight()}\n      >\n        <GridToolBar enabled={shouldRenderGridToolbar}>\n          <ManualUpdateButton\n            manualUpdate={this.props.args.manual_update}\n            onClick={(e: any) => this.returnGridValue()}\n          />\n          <ManualDownloadButton\n            enabled={this.props.args.excelExportMode === \"MANUAL\"}\n            onClick={(e: any) => this.api?.exportDataAsExcel()}\n          />\n          <QuickSearch\n            enableQuickSearch={this.props.args.enable_quicksearch}\n            showOverlay={throttle(() => this.api.showLoadingOverlay(), 1000, {\n              trailing: false,\n            })}\n            onChange={debounce((e) => {\n              this.api.setQuickFilter(e.target.value)\n              this.api.hideOverlay()\n            }, 1000)}\n          />\n        </GridToolBar>\n        <AgGridReact\n          onGridReady={(e) => this.onGridReady(e)}\n          gridOptions={this.gridOptions}\n        ></AgGridReact>\n      </div>\n    )\n  }\n}\n\nexport default withStreamlitConnection(AgGrid)\n","import React from \"react\"\nimport { createRoot } from 'react-dom/client';\nimport AgGrid from \"./AgGrid\"\n\nconst domNode = document.getElementById(\"root\")\nif (domNode) {\n   const root = createRoot(domNode)\n   root.render(<AgGrid />)\n  }\n"],"sourceRoot":""}