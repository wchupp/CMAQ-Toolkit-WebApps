{"version":3,"sources":["utils.js","AgGrid.tsx","index.tsx"],"names":["deepMap","obj","fn","deepMapper","val","Array","isArray","map","Object","keys","reduce","res","key","mapObject","AgGrid","props","frameDtypes","api","columnApi","columnFormaters","manualUpdateRequested","allowUnsafeJsCode","gridOptions","gridContainerRef","isGridAutoHeightOn","convertJavascriptCodeOnGridOptions","convertStringToFunction","render","undefined","state","should_update","changed","forEachNode","rowNode","index","_","rowData","data","setRowData","returnGridValue","loadColumnsState","id","className","getThemeClass","ref","style","defineContainerHeight","ManualUpdateButton","manual_update","onClick","e","onGridReady","console","log","ModuleRegistry","register","ClientSideRowModelModule","CsvExportModule","args","custom_css","css","styles","selector","prop","push","join","getCSS","styleSheet","document","createElement","type","innerText","head","appendChild","addCustomCSS","enable_enterprise_modules","registerModules","ExcelExportModule","GridChartsModule","SparklinesModule","ColumnsToolPanelModule","FiltersToolPanelModule","MasterDetailModule","MenuModule","RangeSelectionModule","RichSelectModule","RowGroupingModule","SetFilterModule","MultiFilterModule","SideBarModule","StatusBarModule","ClipboardModule","LicenseManager","setLicenseKey","frame_dtypes","update_mode","allow_unsafe_jscode","React","createRef","domLayout","columnTypes","dateColumnFilter","filter","filterParams","comparator","filterValue","cellValue","compareAsc","parseISO","numberColumnFilter","shortDateTimeFormat","valueFormatter","params","dateFormatter","value","customDateTimeFormat","column","colDef","custom_format_string","customNumericFormat","numberFormatter","precision","customCurrencyFormat","currencyFormatter","custom_currency_symbol","timedeltaFormat","duration","humanize","assign","warn","JSON","parse","row_data","gridHeight","height","v","JS_PLACEHOLDER","match","RegExp","exec","funcStr","Function","updateEvents","this","update_on","doReturn","forEach","element","addEventListener","debounce","columnsState","columns_state","applyColumnState","applyOrder","event","idx","attachUpdateEvents","forEachDetailGridInfo","i","fitColumns","selectIndex","renderedGridHeight","current","clientHeight","Streamlit","setFrameHeight","columns_auto_size_mode","sizeColumnsToFit","autoSizeAllColumns","isoString","formaterString","date","format","number","currencySymbol","n","Number","parseFloat","isNaN","toFixed","returnData","data_return_mode","forEachLeafNode","row","forEachNodeAfterFilter","group","forEachNodeAfterFilterAndSort","selected","d","isSelected","returnValue","originalDtypes","selectedRows","getSelectedRows","selectedItems","getSelectedNodes","rowIndex","colState","getColumnState","setComponentValue","width","themeName","theme","themeClass","base","reload_data","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9035be39.chunk.js","sourcesContent":["// stole from https://github.com/andfanilo/streamlit-echarts/blob/master/streamlit_echarts/frontend/src/utils.js Thanks andfanilo\nfunction mapObject(obj, fn) {\n    return Object.keys(obj).reduce((res, key) => {\n        res[key] = fn(obj[key])\n        return res\n    }, {})\n}\n\nfunction deepMap(obj, fn) {\n    const deepMapper = (val) =>\n        val !== null && typeof val === \"object\" ? deepMap(val, fn) : fn(val)\n    if (Array.isArray(obj)) {\n        return obj.map(deepMapper)\n    }\n    if (typeof obj === \"object\") {\n        return mapObject(obj, deepMapper)\n    }\n    return obj\n}\n\nexport default deepMap\n","import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\n\nimport React, { ReactNode } from \"react\"\nimport { AgGridReact } from \"@ag-grid-community/react\"\n\nimport { ModuleRegistry, ColumnApi, GridApi, DetailGridInfo } from \"@ag-grid-community/core\"\nimport { CsvExportModule } from \"@ag-grid-community/csv-export\"\nimport { ClientSideRowModelModule } from \"@ag-grid-community/client-side-row-model\"\nimport { LicenseManager } from \"@ag-grid-enterprise/core\"\n\nimport { GridChartsModule } from \"@ag-grid-enterprise/charts\"\nimport { SparklinesModule } from \"@ag-grid-enterprise/sparklines\"\nimport { ClipboardModule } from \"@ag-grid-enterprise/clipboard\"\nimport { ColumnsToolPanelModule } from \"@ag-grid-enterprise/column-tool-panel\"\nimport { ExcelExportModule } from \"@ag-grid-enterprise/excel-export\"\nimport { FiltersToolPanelModule } from \"@ag-grid-enterprise/filter-tool-panel\"\nimport { MasterDetailModule } from \"@ag-grid-enterprise/master-detail\"\nimport { MenuModule } from \"@ag-grid-enterprise/menu\"\nimport { RangeSelectionModule } from \"@ag-grid-enterprise/range-selection\"\nimport { RichSelectModule } from \"@ag-grid-enterprise/rich-select\"\nimport { RowGroupingModule } from \"@ag-grid-enterprise/row-grouping\"\nimport { SetFilterModule } from \"@ag-grid-enterprise/set-filter\"\nimport { MultiFilterModule } from \"@ag-grid-enterprise/multi-filter\"\nimport { SideBarModule } from \"@ag-grid-enterprise/side-bar\"\nimport { StatusBarModule } from \"@ag-grid-enterprise/status-bar\"\n\nimport { parseISO, compareAsc} from \"date-fns\"\nimport { format } from \"date-fns-tz\"\nimport deepMap from \"./utils\"\nimport { duration } from \"moment\"\nimport * as _ from \"lodash\"\nimport { debounce } from \"lodash\"\n\nimport\"./agGridStyle.scss\"\n\nimport \"@fontsource/source-sans-pro\"\ninterface State {\n  rowData: any\n  gridHeight: number\n  should_update: boolean\n}\n\ntype CSSDict = { [key: string]: { [key: string]: string } }\n\nfunction getCSS(styles: CSSDict): string {\n  var css = []\n  for (let selector in styles) {\n    let style = selector + \" {\"\n\n    for (let prop in styles[selector]) {\n      style += prop + \": \" + styles[selector][prop] + \";\"\n    }\n\n    style += \"}\"\n\n    css.push(style)\n  }\n\n  return css.join(\"\\n\")\n}\n\nfunction addCustomCSS(custom_css: CSSDict): void {\n  var css = getCSS(custom_css)\n  var styleSheet = document.createElement(\"style\")\n  styleSheet.type = \"text/css\"\n  styleSheet.innerText = css\n  document.head.appendChild(styleSheet)\n}\n\nclass AgGrid extends StreamlitComponentBase<State> {\n  private frameDtypes: any\n  private api!: GridApi\n  private columnApi!: ColumnApi\n  private columnFormaters: any\n  private manualUpdateRequested: boolean = false\n  private allowUnsafeJsCode: boolean = false\n  private gridOptions: any\n  private gridContainerRef: React.RefObject<HTMLDivElement>\n  private isGridAutoHeightOn: boolean\n\n  constructor(props: any) {\n    super(props)\n    console.log(props)\n\n    ModuleRegistry.register(ClientSideRowModelModule)\n    ModuleRegistry.register(CsvExportModule)\n    if (props.args.custom_css) {\n      addCustomCSS(props.args.custom_css)\n    }\n\n    if (props.args.enable_enterprise_modules) {\n      ModuleRegistry.registerModules([\n        ExcelExportModule,\n        GridChartsModule,\n        SparklinesModule,\n        ColumnsToolPanelModule,\n        FiltersToolPanelModule,\n        MasterDetailModule,\n        MenuModule,\n        RangeSelectionModule,\n        RichSelectModule,\n        RowGroupingModule,\n        SetFilterModule,\n        MultiFilterModule,\n        SideBarModule,\n        StatusBarModule,\n        ClipboardModule,\n      ])\n      if (\"license_key\" in props.args) {\n        LicenseManager.setLicenseKey(props.args[\"license_key\"])\n      }\n    }\n\n    this.frameDtypes = this.props.args.frame_dtypes\n    this.manualUpdateRequested = this.props.args.update_mode === 1\n    this.allowUnsafeJsCode = this.props.args.allow_unsafe_jscode\n    this.gridContainerRef = React.createRef();\n    this.isGridAutoHeightOn = this.props.args.gridOptions?.domLayout === \"autoHeight\"\n\n    this.columnFormaters = {\n      columnTypes: {\n        dateColumnFilter: {\n          filter: \"agDateColumnFilter\",\n          filterParams: {\n            comparator: (filterValue: any, cellValue: string) =>\n              compareAsc(parseISO(cellValue), filterValue),\n          },\n        },\n        numberColumnFilter: {\n          filter: \"agNumberColumnFilter\",\n        },\n        shortDateTimeFormat: {\n          valueFormatter: (params: any) =>\n            this.dateFormatter(params.value, \"dd/MM/yyyy HH:mm\"),\n        },\n        customDateTimeFormat: {\n          valueFormatter: (params: any) =>\n            this.dateFormatter(\n              params.value,\n              params.column.colDef.custom_format_string\n            ),\n        },\n        customNumericFormat: {\n          valueFormatter: (params: any) =>\n            this.numberFormatter(\n              params.value,\n              params.column.colDef.precision ?? 2\n            ),\n        },\n        customCurrencyFormat: {\n          valueFormatter: (params: any) =>\n            this.currencyFormatter(\n              params.value,\n              params.column.colDef.custom_currency_symbol\n            ),\n        },\n        timedeltaFormat: {\n          valueFormatter: (params: any) =>\n            duration(params.value).humanize(true),\n        },\n      },\n    }\n\n    let gridOptions = Object.assign(\n      {},\n      this.columnFormaters,\n      this.props.args.gridOptions\n    )\n\n    if (this.allowUnsafeJsCode) {\n      console.warn(\"flag allow_unsafe_jscode is on.\")\n      gridOptions = this.convertJavascriptCodeOnGridOptions(gridOptions)\n    }\n    this.gridOptions = gridOptions\n\n    this.state = {\n      rowData: JSON.parse(props.args.row_data),\n      gridHeight: this.props.args.height,\n      should_update: false,\n    }\n  }\n\n  static getDerivedStateFromProps(props: any, state: any) {\n    if (props.args.reload_data) {\n      let new_row_data = JSON.parse(props.args.row_data)\n\n      return {\n        rowData: new_row_data,\n        gridHeight: props.args.height,\n        should_update: true,\n      }\n    } else {\n      return {\n        gridHeight: props.args.height,\n      }\n    }\n  }\n\n  private convertStringToFunction(v: string) {\n    const JS_PLACEHOLDER = \"--x_x--0_0--\"\n    let funcReg = new RegExp(\n      `${JS_PLACEHOLDER}\\\\s*((function|class)\\\\s*.*)\\\\s*${JS_PLACEHOLDER}`\n    )\n\n    let match = funcReg.exec(v)\n\n    if (match) {\n      const funcStr = match[1]\n      // eslint-disable-next-line\n      return new Function(\"return \" + funcStr)()\n    } else {\n      return v\n    }\n  }\n\n  private convertJavascriptCodeOnGridOptions = (obj: object) => {\n    return deepMap(obj, this.convertStringToFunction)\n  }\n\n  private attachUpdateEvents(api: GridApi) {\n    let updateEvents = this.props.args.update_on\n    const doReturn = (e: any) => this.returnGridValue(e)\n\n    updateEvents.forEach((element: any) => {\n      if (Array.isArray(element)) {\n        api.addEventListener(element[0], debounce(doReturn, element[1]))\n      } else {\n        api.addEventListener(element, doReturn)\n      }\n    })\n  }\n\n  private loadColumnsState() {\n    const columnsState = this.props.args.columns_state\n\n    if (columnsState != null) {\n      this.columnApi.applyColumnState({ state: columnsState, applyOrder: true})\n    }\n  }\n\n  private onGridReady(event: any) {\n    this.api = event.api\n    this.columnApi = event.columnApi\n\n    this.attachUpdateEvents(this.api)\n    this.api.forEachDetailGridInfo((i: DetailGridInfo) => {\n      if (i.api !== undefined) {\n      this.attachUpdateEvents(i.api)\n      }\n    })\n\n    this.api.addEventListener(\"firstDataRendered\", (e: any) =>\n      this.fitColumns()\n    )\n    \n    this.api.setRowData(this.state.rowData)\n\n    for (var idx in this.gridOptions[\"preSelectedRows\"]) {\n      this.api.selectIndex(this.gridOptions[\"preSelectedRows\"][idx], true, true)\n    }\n    if (this.isGridAutoHeightOn) {\n        const renderedGridHeight = this.gridContainerRef.current?.clientHeight\n        Streamlit.setFrameHeight(renderedGridHeight)\n    }\n    this.returnGridValue('event')\n  }\n\n  private fitColumns() {\n    const columns_auto_size_mode = this.props.args.columns_auto_size_mode\n\n    switch (columns_auto_size_mode) {\n      case 1:\n      case \"FIT_ALL_COLUMNS_TO_VIEW\":\n        this.api.sizeColumnsToFit()\n        break\n\n      case 2:\n      case \"FIT_CONTENTS\":\n        this.columnApi.autoSizeAllColumns()\n        break\n\n      default:\n        break\n    }\n  }\n\n  private dateFormatter(isoString: string, formaterString: string): String {\n    try {\n      let date = parseISO(isoString)\n      return format(date, formaterString)\n    } catch {\n      return isoString\n    } finally {\n    }\n  }\n\n  private currencyFormatter(number: any, currencySymbol: string): String {\n    let n = Number.parseFloat(number)\n    if (!Number.isNaN(n)) {\n      return currencySymbol + n.toFixed(2)\n    } else {\n      return number\n    }\n  }\n\n  private numberFormatter(number: any, precision: number): String {\n    let n = Number.parseFloat(number)\n    if (!Number.isNaN(n)) {\n      return n.toFixed(precision)\n    } else {\n      return number\n    }\n  }\n\n  private returnGridValue(e: any) {\n    console.log(e)\n    let returnData: any[] = []\n    let returnMode = this.props.args.data_return_mode\n\n    switch (returnMode) {\n      case 0: //ALL_DATA\n        this.api.forEachLeafNode((row) => returnData.push(row.data))\n        break\n\n      case 1: //FILTERED_DATA\n        this.api.forEachNodeAfterFilter((row) => {\n          if (!row.group) {\n            returnData.push(row.data)\n          }\n        })\n        break\n\n      case 2: //FILTERED_SORTED_DATA\n        this.api.forEachNodeAfterFilterAndSort((row) => {\n          if (!row.group) {\n            returnData.push(row.data)\n          }\n        })\n        break\n    }\n\n      let selected : any  = {}\n      this.api.forEachDetailGridInfo((d:DetailGridInfo) => {\n        selected[d.id] = []\n        d.api?.forEachNode((n: any) => {\n          if (n.isSelected()) {\n            selected[d.id].push(n)\n          }\n        })\n      })\n\n    let returnValue = {\n      originalDtypes: this.frameDtypes,\n      rowData: returnData,\n      selectedRows: this.api.getSelectedRows(),\n      selectedItems: this.api\n        .getSelectedNodes()\n        .map((n) => ({ rowIndex: n.rowIndex, ...n.data })),\n      colState: this.columnApi.getColumnState(),\n    }\n\n    Streamlit.setComponentValue(returnValue)\n  }\n\n  private ManualUpdateButton(props: any) {\n    if (props.manual_update) {\n      return <button onClick={props.onClick}>Update</button>\n    } else {\n      return <span></span>\n    }\n  }\n\n  private defineContainerHeight() {\n    if (this.isGridAutoHeightOn) {\n      return {\n        width: this.props.width,\n      }\n    } else {\n      return {\n        width: this.props.width,\n        height: this.state.gridHeight,\n      }\n    }\n  }\n\n  private getThemeClass() {\n    const themeName = this.props.args.theme\n    const themeBase = this.props.theme?.base\n    \n    var themeClass = \"ag-theme-\" + themeName\n\n    if ((themeBase === \"dark\") && (themeName !== \"material\")) {\n      themeClass = themeClass + \"-dark\"\n    }\n    return themeClass\n  }\n\n  public render = (): ReactNode => {\n    if (this.api !== undefined) {\n      if (this.state.should_update) {\n        var changed:boolean = false\n        this.api.forEachNode((rowNode, index) => {\n          changed = !(_.isEqual(this.state.rowData[index], rowNode.data))\n        })\n        this.api.setRowData(this.state.rowData)\n        if (changed) {\n          this.returnGridValue('event')\n          changed = false\n        }\n      }\n    }\n    this.loadColumnsState()\n    \n\n    return (\n      <div\n        id=\"gridContainer\"\n        //className={\"ag-theme-\" + this.props.args.theme}\n        className={this.getThemeClass()}\n        ref = {this.gridContainerRef}\n        style={this.defineContainerHeight()}\n      >\n        <this.ManualUpdateButton\n          manual_update={this.manualUpdateRequested}\n          onClick={(e: any) => this.returnGridValue(e)}\n        />\n        <AgGridReact\n          onGridReady={(e) => this.onGridReady(e)}\n          gridOptions={this.gridOptions}\n        ></AgGridReact>\n      </div>\n    )\n  }\n}\n\nexport default withStreamlitConnection(AgGrid)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport AgGrid from \"./AgGrid\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <AgGrid />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}